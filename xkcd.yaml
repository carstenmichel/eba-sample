version: 6
meta:
  name: XKCD
  description: |-
    This fine Agent can lookup XKCDs

    You can ask him a question like

    - show me the XKCD with id "123"

    to retrieve and display the XKCD with the given id
  icon: 'https://xkcd.com/s/0b7742.png'
concepts:
  - name: 'xkd:Containers'
    ontology:
      subClassOf:
        - ':Showable'
        - ':Attribute'
      isListOf: 'xkd:Container'
      isSpellAs: containers|*
  - name: 'xkd:Container'
    ontology:
      subClassOf:
        - ':Showable'
        - ':Attribute'
      isSpellAs: container
  - name: 'xkd:Vessel'
    ontology:
      subClassOf:
        - ':Showable'
        - ':Attribute'
      isSpellAs: vessel
  - name: 'xkd:TheDiscoveredID'
  - name: ':UserString'
  - name: ':All'
  - name: ':ActionShow'
  - name: ':Attribute'
  - name: ':Showable'
  - name: 'xkd:XKCD'
    ontology:
      subClassOf:
        - ':Showable'
        - ':Attribute'
  - name: 'xkd:XKCDs'
  - name: ':StrAttribute'
  - name: ':WithName'
patterns: "<!--\n\tEnter your NL patterns in this markdown panel. \n\tA pattern consists of natural language text annotated with concepts tags. \n\tFor example,\n\t 'tell me a [joke](demo:Joke)' annotates the demo:Joke concept appropriately\n\t 'show me the [weather](demo:Weather)' annotates the demo:Weather concept appropriately. \n\tWe even support regular expression annotations.\n\t For example, '[`REGEX [0-9]{5}`](demo:ZIPCode)' provides a zip code annotation.\n-->\nshow me all [XKCDs](xkd:XKCDs)\nshow me the [XKCD](xkd:XKCD) with id \"___\"\nshow me the [XKCD](xkd:XKCD) [123](xkd:TheDiscoveredID)\n\nshow me [containers](xkd:Containers) on the [vessel](xkd:Vessel) \"___\"\nshow [vessel](xkd:Vessel) with name \"___\""
ontobot: ''
actions:
  - name: 'xkd:identifyVessel'
    signature: 'xkd:Vessel (:WithName (data :UserString)) -> data xkd:Vessel'
    kind: 'nodejs:10'
    code: "const eba = require(\"eba\");\nconst _ = require('lodash');\n\nmodule.exports.main = async function(params) {\n\tconst p = new eba.Params(params);\n\tlet vesselName = await p.get(\":UserString\");\n\treturn new eba.Result().setData('xkd:Vessel', {text: vesselName});\n}"
  - name: 'xkd:showContainers'
    signature: 'xkd:Containers (data xkd:Vessel) -> data xkd:Containers'
    kind: 'nodejs:10'
    code: "const eba = require(\"eba\");\n\nconst _ = require('lodash');\n\nmodule.exports.main = async function(params) {\n\tconst p = new eba.Params(params);\n\tconst vesselName = await p.get(\"xkd:Vessel\");\n\tlet returnString = \"I have no clue about vessel \" + vesselName.text + \" ;-)\";\n  return new eba.Result().setData('xkd:Containers', returnString);\n}"
  - name: 'xkd:showSomething'
    signature: 'xkd:XKCD (xkd:TheDiscoveredID) -> data xkd:XKCD'
    kind: 'nodejs:10'
    code: "const eba = require(\"eba\");\nconst XKCDs = require('./XKCDs.js');\nconst _ = require('lodash');\n\nmodule.exports.main = async function(params) {\n\tconst p = new eba.Params(params);\n\n  const discoveredID = await p.get('xkd:TheDiscoveredID');\n  console.log(\"discoveredID\");\n  console.log(discoveredID);\n  const discoveredXkcdID = _.get(discoveredID, 'theXkcd');\n  \n\tlet XKCDInformation = await XKCDs.searchXkcd(discoveredXkcdID);\n\t\n\treturn new eba.Result()\n    .setData('xkd:XKCD', {\n      name: 'xkd:XKCD',\n      data: XKCDInformation,\n      text: \"XKCDInformation\"\n  })\n}"
  - name: 'xkd:showSingleXKCD'
    signature: 'xkd:XKCD (data :UserString) -> data xkd:XKCD'
    kind: 'nodejs:10'
    code: "const eba = require(\"eba\");\nconst XKCDs = require('./XKCDs.js');\nconst _ = require('lodash');\n\nmodule.exports.main = async function(params) {\n\tlet p = new eba.Params(params)\n\tlet XKCDname = await p.get(\":UserString\");\n\tconsole.log(\"search for: \" + XKCDname);\n\t\n\tlet XKCDInformation = await XKCDs.searchXkcd(XKCDname);\n\t\n\tconsole.log(\"Result of searchXkcd is \" + JSON.stringify(XKCDInformation));\n\tconsole.log(\"Title is \" + XKCDInformation.title);\n\tconsole.log(\"Link to image is \" + XKCDInformation.img);\n\treturn new eba.Result()\n          .setData('xkd:XKCD', {\n            name: 'xkd:XKCD',\n            data: XKCDInformation,\n            text: \"XKCDInformation\"\n          })\n}"
endpoints:
  - name: '@annotate'
    kind: 'nodejs:10'
    code: |-
      const eba = require('eba')
      const _ = require('lodash')
      const db = require('./imaginaryProductDatabase')



      module.exports.main = async (params) => {
        /*
         * This Annotate endpoint will be simulating a database request
         * Instead of looking for a real db we will use the hardcoded JSON Map
         * that you can finc in the asset section
         */
        
        // gets the question that was typed in
        const question = params.input.text
        
         // Now load our little DB
        const littledb = db.database; 
       
        // insert annotation if you find one of the numbers in the database
        const addedAnnotation = eba.mapTree(params.input.tokens, (tt) => {
          
          if (littledb.has(tt.token.form)) {
            const metaValue = littledb.get(tt.token.form);
            tt = eba.insertAnnotation(tt, 'xkd:TheDiscoveredID', 1.0, {theXkcd: tt.token.form})
          }
          
          return tt;
        })
        
        return new eba.Result(addedAnnotation);
      }
  - name: '@start'
    kind: 'nodejs:10'
    code: |
      const eba = require('eba');
      module.exports.main = async (params) => {
        console.log("This is the @start endpoint");
        
        return new eba.Result();
        }
      // ending the async stuff
statics:
  - name: imaginaryProductDatabase.js
    mime: text/javascript
    text: |-
      module.exports.database = new Map([
        ["123", "Centrifugal Force"],
        ["333", "OOH"],
        ["444", "MacGyver"],
      ])
    backend: true
  - name: xkd_XKCD.coffee
    mime: application/vnd.coffeescript
    text: |-
      class xkd_XKCDData extends PureComponent
        constructor: (props) ->
            super props
            @state = expanded:false
        
        render: ->
          R.div className: 'drumherum',
            R.h1 className: 'drumherum', "XKCD"
            
            R.h2 null, @props.data.data.safe_title
            R.img
              src:@props.data.data.img
              style:
                maxWidth: 270
                maxHeight: 500


      class xkd_XKCDNode extends PureComponent
        constructor: (props) ->
            super props
            @state = expanded:false
        
        render: ->
          R.div className: 'drumherum',
            R.h1 className: 'drumherum', "XKCD"
            R.h2 null, @props.data.data.safe_title  
            R.p  null, @props.data.data.num

      class xkd_XKCDContent extends PureComponent
        constructor: (props) ->
            super props
            @state = expanded:false
        
        render: ->
          R.div className: 'drumherum',
            R.h1 className: 'drumherum', "XKCD"
            
            R.h2 null, @props.data.data.safe_title
            
            R.p null, @props.data.data.alt
            R.img
              src:@props.data.data.img
              style:
                maxWidth: 800
                maxHeight: 500

      @props.data.data.safe_title
    frontend: true
  - name: xkd_XKCD.scss
    mime: text/x-scss
    text: >+
      $font-family-1: "Helvetica Neue for IBM", Helvetica, Arial, sans-serif;

      $font-family-2: "Helvetica Neue Roman for IBM", Helvetica,
      Arial,sans-serif;


      .drumherum {
        color: black;
        background-color: white;
        h2 {
          color: blue;
        }
        p {
          border: 2px solid black;
        }
        img { 
         border:10px groove gray;
        }
      }


    frontend: true
  - name: XKCDs.js
    mime: text/javascript
    text: |+
      const requestpromise = require('request-promise-native');
      const _ = require('lodash');
      var async = require('async');


      // now the promise async stuff
      module.exports.searchXkcd = async (number) => {
        console.log("Starting Async job to load something");
        let result = await requestpromise.get({
          url: `https://xkcd.com/${number}/info.0.json`,
          json: true
        })
        console.log("Result of searchXkcd is found");
        //var entries = _.take(result.query.search, 1)
        return result;
        }
      // ending the async stuff




    backend: true
experience: >-
  eyJjb250ZW50SWQiOiJjMzMwZmQ0YmNhNDdiMGExOTBmMjBiNDYzMDZkNTE4NjFjNjdmMjU1IiwiZmVlZGJhY2siOnt9LCJsYXN0VXBkYXRlZCI6MTU3MDYzMjYzMi42MDg2OTg0LCJwYXR0ZXJucyI6W10sInJld3JpdGVSdWxlcyI6W10sInNwZWxsaW5nTWFwIjp7InhrZDpYS0NEIjpbWyJ4a2NkIiwxXV19LCJ2ZXJzaW9uIjoiMS4xLjAiLCJyZXBvcnRzIjpbXX0=
