version: 6
meta:
  name: HamDB
  description: |-
    This Agent allows you to get info about Ham Radio operators

    - show me information about Callsign "DH7YAX"

    to retrieve and display the Callsign Info XKCD
  icon: ''
  bundler: webpack
concepts:
  - name: 'hamdb:Grid'
    ontology:
      isSpellAs: grid
      subClassOf:
        - ':Attribute'
        - ':StrAttribute'
  - name: 'hamdb:QTH'
    ontology:
      subClassOf:
        - ':Attribute'
        - ':Number'
      isSpellAs: QTH
  - name: ':UserString'
  - name: ':Attribute'
  - name: ':Showable'
  - name: 'hamdb:CallSignInfo'
    ontology:
      subClassOf:
        - ':Showable'
        - ':Attribute'
    attributes:
      'hamdb:Operator': operator
      'hamdb:Grid': grid
    notes: cs
  - name: ':Number'
  - name: ':StrAttribute'
  - name: 'hamdb:Operator'
    ontology:
      subClassOf:
        - ':Attribute'
        - ':StrAttribute'
patterns: "<!--\n\tEnter your NL patterns in this markdown panel. \n\tA pattern consists of natural language text annotated with concepts tags. \n\tFor example,\n\t 'tell me a [joke](demo:Joke)' annotates the demo:Joke concept appropriately\n\t 'show me the [weather](demo:Weather)' annotates the demo:Weather concept appropriately. \n\tWe even support regular expression annotations.\n\t For example, '[`REGEX [0-9]{5}`](demo:ZIPCode)' provides a zip code annotation.\n-->\n\nshow me information for [Callsign](hamdb:CallSignInfo) \"___\"\nshow me the [grid](hamdb:Grid) of this callsign\nshow me the [operator](hamdb:Operator) of this callsign\n\n\n\n\n\n"
ontobot: ''
actions:
  - name: 'hamdb:showCallsignInfo'
    signature: 'hamdb:CallSignInfo (data :UserString) -> data hamdb:CallSignInfo'
    kind: 'nodejs:10'
    code: "const eba = require(\"eba\");\nconst hamdb = require('./hamdb.js');\nconst _ = require('lodash');\n\n\nmodule.exports.main = async function(params) {\n\tlet p = new eba.Params(params)\n\tlet callsign = await p.get(\":UserString\");\n\tlet HamDBInformation = await hamdb.searchHamdb(callsign);\n  const meta = new eba.NLToken(\"hamdb:CallSignInfo\")\n    .addProperty(\":WithName\", new eba.NLToken('nlg:PlainText', callsign));\n\treturn new eba.Result()\n    .setData('hamdb:CallSignInfo', {\n      data: HamDBInformation,\n      grid: HamDBInformation.hamdb.callsign.grid,\n      operator: HamDBInformation.hamdb.callsign.name,\n      text: callsign\n    })\n    .setMeta('hamdb:CallSignInfo', meta)\n}"
statics:
  - name: hamdbUI.jsx
    mime: text/jsx
    text: |-
      import 'leaflet.maidenhead/src/maidenhead.js';

      export class hamdb_CallSignInfoData extends React.Component {
        constructor (props) {
          super(props);
          this.mapReference=React.createRef();
        }

        componentDidMount() {
          var map =  L.map(this.mapReference.current, {
            center: [this.props.data.data.hamdb.callsign.lat, 
                    this.props.data.data.hamdb.callsign.lon],
            zoom: 11,
            layers: [
              L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
              }),
              ]
            });
            L.marker([this.props.data.data.hamdb.callsign.lat, 
                      this.props.data.data.hamdb.callsign.lon])
            .addTo(map)
            .bindPopup(this.props.data.data.hamdb.callsign.call)
            .openPopup();
        }

        render() {
          return (
            <div className="drumherum">
              <h1>HamDB</h1>
              <OMInformation omData={this.props.data.data.hamdb}></OMInformation>
              <div ref={this.mapReference} style={{height : '270px'}} />
            </div>)
        }
      }


      export class hamdb_CallSignInfoContent extends React.Component {
        constructor (props) {
          super(props);
          this.mapReference=React.createRef();
        }

        componentDidMount() {
          var map =  L.map(this.mapReference.current, {
            center: [this.props.data.data.hamdb.callsign.lat, 
                    this.props.data.data.hamdb.callsign.lon],
            zoom: 11,
            layers: [
              L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
              }),
              ]
            });
            L.marker([this.props.data.data.hamdb.callsign.lat, 
                      this.props.data.data.hamdb.callsign.lon])
            .addTo(map)
            .bindPopup(this.props.data.data.hamdb.callsign.call)
            .openPopup();
        }

        render() {
          return (
            <div className="contentContainer">
              <div className="leftContainer"> 
                <h1>HamDB</h1>
              </div>
              <div className="rightContainer">
                <OMInformation omData={this.props.data.data.hamdb}></OMInformation>
              </div>
              <div ref={this.mapReference} style={{height : '400px'}}>
              </div>
            </div>)
        }
      }


      export class OMInformation extends React.Component {
        render() {
          var maidenhead = L.Maidenhead.latLngToIndex( 
              parseFloat(this.props.omData.callsign.lat),
              parseFloat(this.props.omData.callsign.lon),
              6);

          return (
            <div>
              <table>
              <tbody>
              <tr>
                <td>Callsign</td>
                <td>{this.props.omData.callsign.call}</td>
              </tr>
              <tr>
                <td>Operator name</td>
                <td>{this.props.omData.callsign.name}</td>
              </tr>
              <tr>
                <td>QTH location</td>
                <td>{maidenhead}</td>
              </tr>
              </tbody>
              </table>
            </div>
            )
        }
      }
    frontend: true
  - name: hamdb.scss
    mime: text/x-scss
    text: >+
      $font-family-1: "Helvetica Neue for IBM", Helvetica, Arial, sans-serif;


      $font-family-2: "Helvetica Neue Roman for IBM",
      Helvetica,Arial,sans-serif;



      .drumherum {
        color: black;
        background-color: white;
        h2 {
          color: blue;
        }
      }





      .contentContainer {
          width: 600px;
          height: 530px;
          background: white;
          margin: auto;
          padding: 10px;
      }

      .leftContainer {
          width: 50%;
          height: 100px;
          float: left;
      }

      .rightContainer {
          margin-left: 50%;
          height: 100px;
      }




    frontend: true
  - name: package.json
    mime: application/json
    text: |-
      {
        "dependencies": {
          "leaflet.maidenhead": "^1.0.0"
        }
      }
    frontend: true
    backend: true
  - name: hamdb.js
    mime: text/javascript
    text: |
      const requestpromise = require('request-promise-native');
      const _ = require('lodash');
      var async = require('async');

      module.exports.searchHamdb = async (callsign) => {
        let result = await requestpromise.get({
          url: `http://api.hamdb.org/v1/${callsign}/json/eba`,
          json: true,
          timeout: 10000
        })
        return result;
        }
    backend: true
experience: >-
  eyJjb250ZW50SWQiOiJjMzMwZmQ0YmNhNDdiMGExOTBmMjBiNDYzMDZkNTE4NjFjNjdmMjU1IiwiZmVlZGJhY2siOnt9LCJsYXN0VXBkYXRlZCI6MTU3MDYzMjYzMi42MDg2OTg0LCJwYXR0ZXJucyI6W10sInJld3JpdGVSdWxlcyI6W10sInNwZWxsaW5nTWFwIjp7InhrZDpYS0NEIjpbWyJ4a2NkIiwxXV19LCJ2ZXJzaW9uIjoiMS4xLjAiLCJyZXBvcnRzIjpbXX0=
